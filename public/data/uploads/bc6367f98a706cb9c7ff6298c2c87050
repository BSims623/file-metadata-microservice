const express = require('express');
const path = require('path')
const crypto = require('crypto')
const mongoose = require('mongoose')
const multer = require('multer')
const GridFsStorage = require('multer-gridfs-storage')
const Grid = require('gridfs-stream')
const methodOverride = require('method-override')
const bodyParser = require('body-parser')
const connectDB = require('./db/connectDB');
const { log } = require('console');
require('dotenv').config()

const app = express()
app.use(bodyParser.json())
app.use(methodOverride('_method'))

app.set('view engine', 'ejs')

const start = async () => {
  try {
    await connectDB(process.env.MONGO_URI)
    app.listen(port, () => console.log(`Server is listening on port ${port}`))
  } catch (error) {
    console.log(error)
  }
}

start()

// Create Storage Engine
const storage = new GridFsStorage({
  url: process.env.MONGO_URI,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});
const upload = multer({ storage });

// Routes
app.get('/', (req, res) => {
  res.render('index')
})

app.post('/upload', upload.single('file'), (req, res) => {
  res.json({ file: req.file })
})

port = process.env.PORT || 3000

